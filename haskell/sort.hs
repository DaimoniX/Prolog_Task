-- Функція бульбашкового сортування для користувача.
bubbleSort :: Ord a => [a] -> [a]
-- Якщо масив порожній або містить один елемент, то повертаємо його.
bubbleSort [] = []
bubbleSort [x] = [x]
-- В іншому випадку викликаємо допоміжну функцію з кількістю ітерацій, рівною довжині масиву.
bubbleSort xs = bubbleSort' xs (length xs)

-- Допоміжна функція.
bubbleSort' :: Ord a => [a] -> Int -> [a]
-- Якщо кількість ітерацій дорівнює 0, то повертаємо відсортований масив.
bubbleSort' xs 0 = xs
-- В іншому випадку викликаємо допоміжну функцію з кроком бульбашкового сортування.
bubbleSort' xs n = bubbleSort' (bubbleStep xs) (n - 1)

-- Крок бульбашкового сортування.
bubbleStep :: Ord a => [a] -> [a]
-- Якщо у масиві залишився один елемент, то повертаємо його.
bubbleStep [x] = [x]
bubbleStep (x : y : rest)
  -- Якщо перший елемент більший за другий, то міняємо їх місцями.
  | x > y     = y : bubbleStep (x:rest)
  | otherwise = x : bubbleStep (y:rest)

main = do
    print $ bubbleSort [64, 34, 25, 12, 22, 11, 90]

